$pdk.ns("$pdk.plugin.amcn.ima");
$pdk.plugin.amcn.ima.core = $pdk.extend(function() {}, {
    // settings
    adsRenderingSettings: null,
    states: {
        imaLoaded: false,
        adDisplayContainerLoaded: false,
        adsLoaderLoaded: false,
        adsManagerLoaded: false,
        adsRequested: false,
        adPlaying: false,
        adMuted: false,
        adPaused: false,
        fullscreen: false,
    },
    debugMode: false,
    displayCounter: false,
    showAdNumber: false,
	prefetchWindow: 10,
    scope: [],

    // references
    imaContainer: null,
    controller: null,
    videoProxy: null,
    adDisplayContainer: null,
    adsLoader: null,
    adsManager: null,
    release: null,
    playhead: {
        currentTime: 0,
    },
	cuepoints: [],
	bufferedCuePoints: [],
    adCounter: null,

    requestObj: null,

    adHoliday: null,
    lastHoliday: null,

    // constants
    _imaJsURL: "//imasdk.googleapis.com/js/sdkloader/ima3.js",
    _imaDebugJsURL: "//imasdk.googleapis.com/js/sdkloader/ima3_debug.js",

    imaHoliday: function(){
        var config = {
            active: false,
            last: 0,
            duration: 0
        };

        var getValue = function(property){
            if(typeof config[property] !== 'undefined'){
                return config[property];
            }
        };

        var setValue = function(property, value){
            if(typeof config[property] !== 'undefined'){
                config[property] = value;
            }
        };

        return {
            getValue: getValue,
            setValue: setValue
        };
    },

    constructor: function() {
        console.log('%c ima ### constructor | ', 'background-color: #00ccff; color: #000000;');

        this.imaContainer = document.createElement("div");
        this.imaContainer.style.position = "relative";
    },
    initialize: function(loadObj) {
        console.log('%c ima ### initialize | ', 'background-color: #00ccff; color: #000000;', loadObj);
        this.controller = loadObj.controller;

        var publishStateCookie = amcnPlatformConfig.network + '-tve-publish_state';
        publishState = (jQuery.cookie(publishStateCookie) != 'undefined') ? jQuery.cookie(publishStateCookie) : 'public';

        // detect plugin debug mode
        if(loadObj.vars.debug_mode == "true"){
            this.debugMode = true;
        }

        if(loadObj.vars.display_counter == "true"){
            this.displayCounter = true;
        }

        if(publishState == 'restricted'){
            this.displayCounter = false;
        }

        if(loadObj.vars.show_ad_number == "true"){
            this.showAdNumber = true;
        }

		if(loadObj.vars.prefetch_window !== null && parseInt(loadObj.vars.prefetch_window) >= 0){
			this.prefetchWindow = parseInt(loadObj.vars.prefetch_window);
		}

        // store player scope
        this.scope.push(loadObj.controller.component.scopes);

        // include the IMA JS
        if(!imaPlugin.states.imaLoaded){
            var imaScript = imaPlugin.debugMode ? imaPlugin._imaDebugJsURL : imaPlugin._imaJsURL;
            tpLoadScript(imaScript, imaPlugin.listeners.custom.OnIMALoaded);
        }

        // initialize ad holiday config
        this.adHoliday = this.imaHoliday();

        // set up PDK event listeners
        imaPlugin.registerPdkEvents();
    },

    setupImaAds: function(adUrl){
        // set up IMA request
        var mediaArea = imaPlugin.controller.getMediaArea();
        var overlayArea = imaPlugin.controller.getOverlayArea();
        var adRequest = new google.ima.AdsRequest();

        // set properties
        adRequest.adTagUrl = adUrl;
        adRequest.linearAdSlotWidth = mediaArea.width;
        adRequest.linearAdSlotHeight = mediaArea.height;
        adRequest.nonLinearAdSlotWidth = overlayArea.width;
        adRequest.nonLinearAdSlotHeight = overlayArea.height;

        if(!imaPlugin.states.adsRequested){
            // make IMA ad request
            if(imaPlugin.debugMode){
                console.log('%c ima ### setupImaAds > requestAds > ', 'background-color: #00ccff; color: #000000;', adRequest);
            }
            imaPlugin.adsLoader.requestAds(adRequest, imaPlugin.requestObj);

            imaPlugin.states.adsRequested = true;
        };
    },

    getDimensions: function(){
        var width, height, type;

        if(imaPlugin.states.fullscreen){
            // retrieve full screen size
            width = screen.width,
            height = screen.height,
            type = google.ima.ViewMode.FULLSCREEN;
        }
        else{
            // determine size of media area from PDK
            var mediaArea = imaPlugin.controller.getMediaArea();

            width = mediaArea.width;
            height = mediaArea.height;
            type = google.ima.ViewMode.NORMAL;
        }

        var area = {
            width: width,
            height: height,
            type: type,
        };

        return area;
    },

    registerPdkEvents: function(){
        if(imaPlugin.debugMode){
            console.log('%c ima ### registerPdkEvents | ', 'background-color: #00ccff; color: #000000;');
        }
        imaPlugin.controller.addEventListener('OnPlayerLoaded', imaPlugin.listeners.pdk.OnPlayerLoaded, '*');
        imaPlugin.controller.addEventListener('OnReleaseStart', imaPlugin.listeners.pdk.OnReleaseStart, '*');
        imaPlugin.controller.addEventListener('OnReleaseEnd', imaPlugin.listeners.pdk.OnReleaseEnd, '*');
        imaPlugin.controller.addEventListener('OnMediaStart', imaPlugin.listeners.pdk.OnMediaStart, '*');
        imaPlugin.controller.addEventListener('OnMediaPause', imaPlugin.listeners.pdk.OnMediaPause, '*');
        imaPlugin.controller.addEventListener('OnMediaUnpause', imaPlugin.listeners.pdk.OnMediaUnpause, '*');
        imaPlugin.controller.addEventListener('OnMediaSeek', imaPlugin.listeners.pdk.OnMediaSeek, '*');
        imaPlugin.controller.addEventListener('OnMediaPlaying', imaPlugin.listeners.pdk.OnMediaPlaying, '*');
        imaPlugin.controller.addEventListener('OnShowFullScreen', imaPlugin.listeners.pdk.OnShowFullScreen, '*');
        imaPlugin.controller.addEventListener('OnOverlayAreaChanged', imaPlugin.listeners.pdk.OnOverlayAreaChanged, '*');
        imaPlugin.controller.addEventListener('OnVolumeChange', imaPlugin.listeners.pdk.OnVolumeChange, '*');
        imaPlugin.controller.addEventListener('OnMute', imaPlugin.listeners.pdk.OnMute, '*');
        imaPlugin.controller.addEventListener('amcn.pdk.events.resume.OnResume', imaPlugin.listeners.pdk.OnResume, '*');
    },
    registerImaEvents: function(){
        if(imaPlugin.debugMode){
            console.log('%c ima ### registerImaEvents | ', 'background-color: #00ccff; color: #000000;');
        }
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY, imaPlugin.listeners.ima.onAdBreakReady, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, imaPlugin.listeners.ima.onAllAdsCompleted, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, imaPlugin.listeners.ima.onComplete, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, imaPlugin.listeners.ima.onContentPauseRequested, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, imaPlugin.listeners.ima.onContentResumeRequested, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.CLICK, imaPlugin.listeners.ima.onClick, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.LOG, imaPlugin.listeners.ima.onLog, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED, imaPlugin.listeners.ima.onPaused, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, imaPlugin.listeners.ima.onResumed, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, imaPlugin.listeners.ima.onStarted, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.VOLUME_CHANGED, imaPlugin.listeners.ima.onVolumeChanged, false, this);
        imaPlugin.adsManager.addEventListener(google.ima.AdEvent.Type.VOLUME_MUTED, imaPlugin.listeners.ima.onVolumeMuted, false, this);
    },

    // set the IMA Ad Display Container
    generateAdDisplayContainer: function(){
        if(imaPlugin.debugMode){
            console.log('%c ima ### generateAdArea | ', 'background-color: #00ccff; color: #000000;');
        }

        // set reference to the PDK video proxy
        imaPlugin.videoProxy = imaPlugin.controller.getVideoProxy();

        // allow for SWF based creatives in iframe
        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.INSECURE);
        google.ima.settings.setAutoPlayAdBreaks(false);

        imaPlugin.adDisplayContainer = new google.ima.AdDisplayContainer(imaPlugin.imaContainer, imaPlugin.videoProxy);
        imaPlugin.adDisplayContainer.initialize();

        imaPlugin.states.adDisplayContainerLoaded = true;
    },
    // set the IMA Ads Loader
    generateAdsLoader: function(){
        if(imaPlugin.debugMode){
            console.log('%c ima ### generateAdsLoader | ', 'background-color: #00ccff; color: #000000;');
        }

        imaPlugin.adsLoader = new google.ima.AdsLoader(imaPlugin.adDisplayContainer);

        // set loader events
        imaPlugin.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, imaPlugin.listeners.ima.onAdsManagerLoaded, false, this);
        imaPlugin.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, imaPlugin.listeners.ima.onAdError, false, this);

        imaPlugin.states.adsLoaderLoaded = true;
    },
    // creates overlay card to display ad countdown
    generateCounterCard: function(){
        // counter card template
        var countdownCardHtml = '<div class="tpAdCountdownCard" style="padding: 3px; height: 23px; background-color: rgba(51, 51, 51, .3);">' +
                        '<div class="tpAdCountdownCardInner" style="clear: both;">' +
                            '<div class="counter-left" style="float: left; margin-left: 3px;">${adLabel}</div>' +
                            '<div class="counter-right" style="float: right; margin-right: 3px;">This ad ends in <span class="counter-number">${duration}</span> seconds</div>' +
                            '<div class="counter-clear" style="clear: both;"></div>' +
                        '</div>' +
                    '</div>';

        var adTimer = function(){
            // recursive delayed call
            imaPlugin.adCounter = window.setTimeout(adTimer, 1000);

            // check if ad is playing
            if(!imaPlugin.states.adPaused){
                var currentTime = parseInt(jQuery('.counter-number').text());
                var updatedTime = (currentTime - 1) > 0 ? currentTime - 1 : '0';
                jQuery('.counter-number').text(updatedTime);
            }
        };

        var presenter = {
            show: function(initVars){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### ad counter > show ', 'background-color: #ffccff; color: #000000;', initVars);
                }

                // countdown initialized
                imaPlugin.adCounter = window.setTimeout(adTimer, 1000);
            },
            hide: function(){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### ad counter > hide ', 'background-color: #ffccff; color: #000000;');
                }

                // remove countdown
                window.clearTimeout(imaPlugin.adCounter);
            }
        };

        $pdk.controller.addPlayerCard('overlays', 'adCountdownCard', countdownCardHtml, 'urn:theplatform:pdk:area:player', {adNumber: '0', adTotal: '0', duration: '0'}, presenter, 99, imaPlugin.scope);
    },

    // set up ads when script loaded
    initializeAds: function(data){
        if(imaPlugin.debugMode){
            console.log('%c ima ### listeners > OnIMALoaded > initializeAds >', 'background-color: #00ccff; color: #000000;', data);
        }

        try{
            imaPlugin.generateAdDisplayContainer();
            imaPlugin.generateAdsLoader();

            // deregister
            imaPlugin.controller.removeEventListener('OnPlayButtonClicked', imaPlugin.initializeAds, '*');
            imaPlugin.controller.removeEventListener('OnSetRelease', imaPlugin.initializeAds, '*');
            imaPlugin.controller.removeEventListener('OnSetReleaseUrl', imaPlugin.initializeAds, '*');
            imaPlugin.controller.removeEventListener('OnSetSmil', imaPlugin.initializeAds, '*');
            imaPlugin.controller.removeEventListener('OnReleaseStart', imaPlugin.initializeAds, '*');
        }
        catch(err){
            console.log('%c initializeAds failure: '+err, 'background-color:#ff0000; color:#ffffff');
        }
    },

    // sets up ad holiday timer
    initAdHoliday: function(){
        console.log('%c ima ### initAdHoliday > ', 'background-color: #00ccff; color: #000000;');

        imaPlugin.controller.addEventListener('OnMediaPlaying', imaPlugin.listeners.pdk.OnAdHolidayProgress, '*');
        imaPlugin.controller.addEventListener('OnMediaSeek', imaPlugin.listeners.pdk.OnAdHolidaySeek, '*');

        // set state
        imaPlugin.adHoliday.setValue('active', true);
        // set current time, as milliseconds
        imaPlugin.adHoliday.setValue('last', imaPlugin.playhead.currentTime * 1000);
        // reset duration
        imaPlugin.adHoliday.setValue('duration', 0);
    },

    endAdHoliday: function(){
        console.log('%c ima ### endAdHoliday > ', 'background-color: #00ccff; color: #000000;');

        // remove state
        imaPlugin.adHoliday.setValue('active', false);

        // reset values
        imaPlugin.adHoliday.setValue('last', 0);
        imaPlugin.adHoliday.setValue('duration', 0);

        // remove listener
        imaPlugin.controller.removeEventListener('OnMediaPlaying', imaPlugin.listeners.pdk.OnAdHolidayProgress, '*');
        imaPlugin.controller.removeEventListener('OnMediaSeek', imaPlugin.listeners.pdk.OnAdHolidaySeek, '*');
    },

    // event listeners
    listeners: {
        // PDK events
        pdk: {
            OnPlayerLoaded: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnPlayerLoaded > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // initialize playhead for ad calls
                imaPlugin.playhead.currentTime = 0;

                // set up the ad counter card
                imaPlugin.generateCounterCard();

                // trigger ads ready event
                //      NOTE: this is a fix for race condition with ads loading before OnPlayerLoaded
                if(imaPlugin.states.imaLoaded === true){
                    $pdk.controller.dispatchEvent('OnAdsReady', {type: 'ads', set: true, players: imaPlugin.scope}, imaPlugin.scope);
                }
            },
            OnReleaseStart: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnReleaseStart > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // store the release object, with clip data
                imaPlugin.release = data.data;

                // ad playlist data
                var adPlaylist = data.data.customData.adPlaylistUrl;

                // push ad url to IMA ad request setup
                imaPlugin.setupImaAds(adPlaylist);
            },
            OnReleaseEnd: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnReleaseEnd > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // end holiday
                imaPlugin.endAdHoliday();

                // notify the ads loader that main content has completed
                imaPlugin.adsLoader.contentComplete();

                // cleanup
                imaPlugin.adsManager.destroy();
                imaPlugin.adsLoader.destroy();
                imaPlugin.adDisplayContainer.destroy();

                // allow for request of fresh ads
                imaPlugin.states.adsRequested = false;

                // regenerate helpers
                imaPlugin.controller.addEventListener('OnPlayButtonClicked', imaPlugin.initializeAds, '*');
                imaPlugin.controller.addEventListener('OnSetRelease', imaPlugin.initializeAds, '*');
                imaPlugin.controller.addEventListener('OnSetReleaseUrl', imaPlugin.initializeAds, '*');
                imaPlugin.controller.addEventListener('OnSetSmil', imaPlugin.initializeAds, '*');
            },
            OnMediaStart: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnMediaStart > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // toggle content to paused state when ad is currently playing
                if(imaPlugin.states.adPlaying){
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners > OnMediaStart > ad playing, pause ', 'background-color: #ffccff; color: #000000;');
                    }
                    // imaPlugin.controller.pause(true, imaPlugin.scope);
                }
                else{
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners > OnMediaStart > content playing, resume ', 'background-color: #ffccff; color: #000000;');
                    }
                    imaPlugin.controller.pause(false, imaPlugin.scope);
                }
            },
            OnMediaPause: function(data){
                if(imaPlugin.states.adPlaying){
                    var playButtonHolder = document.querySelector('[id$=".standby.playButtonHolder"]');
                    playButtonHolder.style.display = 'none';
                }
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnMediaPause > ', 'background-color: #ffccff; color: #000000;', data);
                }
            },
            OnMediaUnpause: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnMediaUnpause > ', 'background-color: #ffccff; color: #000000;', data);
                }
            },
            OnMediaSeek: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnMediaSeek > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // update video playhead (required for ad requests positioning)
                imaPlugin.playhead.currentTime = data.data.end.currentTimeAggregate / 1000;
				var indexToDelete = -1;

				// check cuepoints array, clear items that are earlier then this scrub point
				for(var i = 0; i < imaPlugin.cuepoints.length; i++){
					if(imaPlugin.cuepoints[i] < imaPlugin.playhead.currentTime){
						// add 1, since we don't want the specific INDEX, but the COUNT
						indexToDelete = i + 1;
					}
				}

				// confirm index is valid
				if(indexToDelete > 0){
					console.log('%c ima ### listeners > OnMediaSeek > indexToDelete ', 'background-color: #ffccff; color: #000000;', indexToDelete, imaPlugin.cuepoints);

					// remove ad unit from cuepoint index
					imaPlugin.cuepoints.splice(0, indexToDelete);
				}
            },
            OnMediaPlaying: function(data){
                // console.log('%c ima ### listeners > OnMediaPlaying > ', 'background-color: #ffccff; color: #000000;', data);

                // update video playhead (required for ad requests positioning)
                imaPlugin.playhead.currentTime = data.data.currentTimeAggregate / 1000;

                if(imaPlugin.states.adPlaying){
                    console.log('%c ima ### listeners > OnMediaPlaying > adPlaying ', 'background-color: #ff0000; color: #000000;', data);
                    imaPlugin.controller.pause(true, imaPlugin.scope);
                }
                else{
                    // force countdown card to hide
                    // @NOTE - this hides all other cards, if adCountdownCard is missing
                    if($pdk.jQuery('.tpAdCountdownCard').length){
                        $pdk.controller.hidePlayerCard('overlays', 'adCountdownCard', imaPlugin.scope);
                    }
                }

				// manage prefetching of ad unit
				var nextCuePoint = imaPlugin.cuepoints[0];

				// current time is 10 seconds from next cue point, and we haven't already buffered this request
				if((imaPlugin.playhead.currentTime + imaPlugin.prefetchWindow > nextCuePoint) && (nextCuePoint > 0) && (imaPlugin.bufferedCuePoints.indexOf(nextCuePoint) < 0)){
					if(imaPlugin.debugMode){
	                    console.log('%c ima ### listeners > OnMediaPlaying > fetching next break ', 'background-color: #ffccff; color: #000000;', nextCuePoint);
	                }
					imaPlugin.adsManager.requestNextAdBreak();
					imaPlugin.bufferedCuePoints.push(nextCuePoint);
				}
            },
            OnShowFullScreen: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnShowFullScreen > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // check status of fullscreen, adjsut state
                if(data.data === true){
                    imaPlugin.states.fullscreen = true;
                }
                else{
                    imaPlugin.states.fullscreen = false;
                }

                // filter attempts to adjust prior to adsmanager initialization
                if(imaPlugin.states.adsManagerLoaded){
                    // retrieve updated dimensions
                    var dimensions = imaPlugin.getDimensions();
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners > OnShowFullScreen > dimensions > ', 'background-color: #ffccff; color: #000000;', dimensions.width, dimensions.height, dimensions.type);
                    }

                    // adjust to media area
                    imaPlugin.adsManager.resize(dimensions.width, dimensions.height, dimensions.type);
                }
            },
            OnOverlayAreaChanged: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnOverlayAreaChanged > ', 'background-color: #ffccff; color: #000000;', data);
                }

                // filter attempts to adjust prior to adsmanager initialization
                if(imaPlugin.states.adsManagerLoaded){
                    // retrieve updated dimensions
                    var dimensions = imaPlugin.getDimensions();
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners > OnOverlayAreaChanged > dimensions > ', 'background-color: #ffccff; color: #000000;', dimensions.width, dimensions.height, dimensions.type);
                    }

                    // adjust to media area
                    imaPlugin.adsManager.resize(dimensions.width, dimensions.height, dimensions.type);
                }
            },
            OnVolumeChange: function(data){
                console.log('%c ima ### listeners > OnVolumeChange ', 'background-color: #ffccff; color: #000000;', data);

                // convert to decimal
                var volume = data.data / 100;

                imaPlugin.adsManager.setVolume(volume);
            },
            OnMute: function(data){
                console.log('%c ima ### listeners > OnMute ', 'background-color: #ffccff; color: #000000;', data);

                var mute = data.data;

                if(mute){
                    imaPlugin.adsManager.setVolume(0);
                }
                else{
                    imaPlugin.adsManager.setVolume(0.3);
                }
            },
            OnResume: function(data){
                console.log('%c ima ### listeners > OnResume ', 'background-color: #ffccff; color: #000000;', data);

                // user is resuming mid-stream, initialize ad holiday
                imaPlugin.initAdHoliday();
            },
            OnAdHolidayProgress: function(response){
                // update duration
                var timeChange = response.data.currentTimeAggregate - imaPlugin.adHoliday.getValue('last');
                var newDuration = imaPlugin.adHoliday.getValue('duration') + timeChange;

                // compare
                // @TODO - set 30 from plugin conf (or ad policy conf)
                if(newDuration > 30 * 1000){
                    // end ad holiday
                    imaPlugin.endAdHoliday();
                }
                else{
                    // ensure positive change
                    if(newDuration > 0){
                        // update duration
                        imaPlugin.adHoliday.setValue('duration', newDuration);
                    }
                }

                // update last
                imaPlugin.adHoliday.setValue('last', response.data.currentTimeAggregate);
            },
            OnAdHolidaySeek: function(response){
                // update last
                imaPlugin.adHoliday.setValue('last', response.data.end.currentTimeAggregate);
            }
        },

        // IMA events
        ima: {
            onAdBreakReady: function(data){
                // retrieve basic ad data
                var adBreak = data.getAdData();
                var adBreakTime = adBreak.adBreakTime;

                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onAdBreakReady > ', 'background-color: #00ccff; color: #000000;', adBreak);
                }

                // check ad holiday state
                if(imaPlugin.adHoliday.getValue('active') === false && imaPlugin.lastHoliday !== adBreakTime){
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners < onAdBreakReady > playing ad ', 'background-color: #00ccff; color: #000000;');
                    }
                    // allow playback
                    imaPlugin.adsManager.start();
                    // reset holiday time
                    imaPlugin.lastHoliday = null;
                }
                else{
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners < onAdBreakReady > holiday ', 'background-color: #00ccff; color: #000000;');
                    }
                    // update last holiday time
                    imaPlugin.lastHoliday = adBreakTime;
                }
            },
            onAdsManagerLoaded: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onAdsManagerLoaded > ', 'background-color: #00ccff; color: #000000;', data);
                }

                // determine ad render settings for player context
                imaPlugin.adsRenderingSettings = new google.ima.AdsRenderingSettings();
                imaPlugin.adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;
                imaPlugin.adsRenderingSettings.loadVideoTimeout = 7000;

                // setup the ads manager
                imaPlugin.adsManager = data.getAdsManager(imaPlugin.playhead, imaPlugin.adsRenderingSettings);

                // determine player size
                var dimensions = imaPlugin.getDimensions();

                try{
                    // initialize the ads manager
                    imaPlugin.adsManager.init(dimensions.width, dimensions.height, dimensions.type);

                    imaPlugin.states.adsManagerLoaded = true;

					// store cue point data
					imaPlugin.cuepoints = imaPlugin.adsManager.getCuePoints();
                }
                catch(error){
                    console.log('%c ima ### listeners < onAdsManagerLoaded > error > ', 'background-color: #ff0000; color: #000000;', error);
                }

                // register all ima related events, now that the handlers are initialized
                imaPlugin.registerImaEvents();
            },
            onAdError: function(data){
                console.log('%c ima ### listeners < onAdError > ', 'background-color: #00ccff; color: #000000;', data);

                var errorResponse = data.getError();
                console.log('%c ima ### listeners < onAdError > errorResponse > ', 'background-color: #00ccff; color: #000000;', errorResponse);

                var context = data.getUserRequestContext();
                console.log('%c ima ### listeners < onAdError > context > ', 'background-color: #00ccff; color: #000000;', context);

                var error = {
                    code: errorResponse.getErrorCode(),
                    message: errorResponse.getMessage(),
                    type: errorResponse.getType(),
                    vast: errorResponse.getVastErrorCode(),
                };

                // destroy the ads manager
                imaPlugin.adsManager.destroy();

                // resume content playback
                imaPlugin.controller.pause(false, imaPlugin.scope);

				// get ad unit info
				var adUnit = data.getAd();
                var adPodInfo = adUnit.getAdPodInfo();
				var offset = adPodInfo.getTimeOffset();

				// remove this ad unit from the registered breaks
				adIndex = imaPlugin.cuepoints.indexOf(offset);
				if(adIndex >= 0){
					// remove ad unit from cuepoint index
					imaPlugin.cuepoints.splice(adIndex, 1);
				}

                // remove counter card
                if($pdk.jQuery('.tpAdCountdownCard').length){
                    $pdk.controller.hidePlayerCard('overlays', 'adCountdownCard', imaPlugin.scope);
                }

                console.log('%c ima ### listeners < onAdError > error object > ', 'background-color: #00ccff; color: #000000;', error);
            },
            onAllAdsCompleted: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onAllAdsCompleted > ', 'background-color: #00ccff; color: #000000;', data);
                }

				// cleanup
                imaPlugin.adsLoader.destroy();
            },
            onComplete: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onComplete > ', 'background-color: #00ccff; color: #000000;', data);
                }

                // hide countdown card
                if($pdk.jQuery('.tpAdCountdownCard').length){
                    $pdk.controller.hidePlayerCard('overlays', 'adCountdownCard', imaPlugin.scope);
                }
            },
            onContentPauseRequested: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onContentPauseRequested > ', 'background-color: #00ccff; color: #000000;', data);
                }

                // trigger an ad start event
                $pdk.controller.dispatchEvent('OnAdStarted', {}, imaPlugin.scope);

                // pause video content
                // imaPlugin.controller.pause(true, imaPlugin.scope);

                // hide subtitles
                $pdk.controller.setShowSubtitles(false, '*');

                // update to ad control rack
                imaPlugin.controller.setPlayerLayoutUrl('/wp-content/plugins/amcn-theplatform-shortcode/assets/ad-noscrubber.xml', '*');
            },
            onContentResumeRequested: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onContentResumeRequested > ', 'background-color: #00ccff; color: #000000;', data);
                }

                // trigger an ad end event
                $pdk.controller.dispatchEvent('OnAdEnded', {}, imaPlugin.scope);

                // update adPlaying status
                imaPlugin.states.adPlaying = false;

                // continue playing video content
                imaPlugin.controller.pause(false, imaPlugin.scope);

                // allow subtitles
                $pdk.controller.setShowSubtitles(true, '*');

                // initialize ad holiday
                imaPlugin.initAdHoliday();

                // set back to default controls
                // @TODO - move this to CDN
                imaPlugin.controller.setPlayerLayoutUrl('/wp-content/plugins/amcn-theplatform-shortcode/assets/standard.xml', '*');
            },
            onClick: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onClick > ', 'background-color: #00ccff; color: #000000;', data);
                }

                // call ad pause method to ensure proper controls
                imaPlugin.listeners.custom.OnAdPauseButtonClicked();
            },
            onLog: function(data){
                console.log('%c ima ### listeners < onLog > ', 'background-color: #00ccff; color: #000000;', data);

                var logData = data.getAdData();
                console.log('%c ima ### listeners < onLog > logData > ', 'background-color: #00ccff; color: #000000;', logData);
            },
            onPaused: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onPaused > ', 'background-color: #00ccff; color: #000000;', data);
                }
            },
            onResumed: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onResumed > ', 'background-color: #00ccff; color: #000000;', data);
                }
            },
            onStarted: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onStarted > ', 'background-color: #00ccff; color: #000000;');
                }

                // force loading spinner to hide
                $pdk.jQuery('.tpLoadingIndicator').hide();

                // update ad state
                imaPlugin.states.adPlaying = true;

                var adUnit = data.getAd();
                var adPodInfo = adUnit.getAdPodInfo();
                var adDuration = adUnit.getDuration() > 0 ? Math.floor(adUnit.getDuration()) : 0;

                console.log('%c ima ### adDuration: '+ adUnit.getDuration() +' ('+Math.floor(adDuration) +')', 'background-color: #00ccff; color: #000000;');

                var ad = {
                    position: adPodInfo.getAdPosition(),
                    index: adPodInfo.getPodIndex(),
                    offset: adPodInfo.getTimeOffset(),
                    total: adPodInfo.getTotalAds(),

                    id: adUnit.getAdId(),
                    traffic: adUnit.getTraffickingParameters(),
                    type: adUnit.getContentType(),
                    description: adUnit.getDescription(),
                    duration: adDuration,
                    height: adUnit.getHeight(),
                    minDuration: adUnit.getMinSuggestedDuration(),
                    title: adUnit.getTitle(),
                    width: adUnit.getWidth(),
                    wrapper: adUnit.getWrapperAdIds(),
                    wrapperSystem: adUnit.getWrapperAdSystems(),
                    linear: adUnit.isLinear(),
                };

                var extraAdData = data.getAdData();

                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onStarted > adInfo > ', 'background-color: #00ccff; color: #000000;', ad, extraAdData);
                }

				// remove this ad unit from the registered breaks
				adIndex = imaPlugin.cuepoints.indexOf(ad.offset);
				if(adIndex >= 0){
					// remove ad unit from cuepoint index
					imaPlugin.cuepoints.splice(adIndex, 1);

					console.log('%c ima ### listeners < onStarted > started unit ', 'background-color: #ff00ff; color: #000000;', ad.offset);
				}

                if(imaPlugin.displayCounter && adDuration > 0){
                    var adLabel = '';

                    // generate left ad labeling based on config
                    if(imaPlugin.showAdNumber){
                        adLabel = 'Ad '+ad.position+' of '+ad.total;
                    }
                    else{
                        adLabel = 'Advertisement';
                    }

                    // set up ad counter card data
                    $pdk.controller.showPlayerCard('overlays', 'adCountdownCard', 'urn:theplatform:pdk:area:player', {adLabel: adLabel, duration: ad.duration}, imaPlugin.scope);
                }
            },
            onVolumeChanged: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onVolumeChanged > ', 'background-color: #00ccff; color: #000000;', data);
                }
            },
            onVolumeMuted: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners < onVolumeMuted > ', 'background-color: #00ccff; color: #000000;', data);
                }
            },
        },

        // custom events
        custom: {
            // bootstrapping for the IMA processing
            OnIMALoaded: function(data){
                if(!imaPlugin.states.imaLoaded){
                    if(imaPlugin.debugMode){
                        console.log('%c ima ### listeners > OnIMALoaded > ', 'background-color: #00ccff; color: #000000;', data);
                    }

                    // set loaded flag
                    imaPlugin.states.imaLoaded = true;

                    // generate the ad helpers, on initialization of user based playback
                    imaPlugin.controller.addEventListener('OnPlayButtonClicked', imaPlugin.initializeAds, '*');
                    imaPlugin.controller.addEventListener('OnSetRelease', imaPlugin.initializeAds, '*');
                    imaPlugin.controller.addEventListener('OnSetReleaseUrl', imaPlugin.initializeAds, '*');
                    imaPlugin.controller.addEventListener('OnSetSmil', imaPlugin.initializeAds, '*');

                    // trigger ads ready event
                    $pdk.controller.dispatchEvent('OnAdsReady', {type: 'ads', set: true, players: imaPlugin.scope}, imaPlugin.scope);
                }
            },
            // custom ad control rack pause handler
            OnAdPauseButtonClicked: function(data){
                if(imaPlugin.debugMode){
                    console.log('%c ima ### listeners > OnAdPlayButtonClicked > ', 'background-color: #00ccff; color: #000000;', data);
                }

                // check for playable state of ad unit
                if(!imaPlugin.states.adPaused){
                    // pause the ad
                    imaPlugin.adsManager.pause();

                    // update controls
                    imaPlugin.controller.setPlayerLayoutUrl('/wp-content/plugins/amcn-theplatform-shortcode/assets/ad-noscrubber-paused.xml', '*');

                    // update state
                    imaPlugin.states.adPaused = true;
                }
                else{
                    // unpause ad
                    imaPlugin.adsManager.resume();

                    // update controls
                    imaPlugin.controller.setPlayerLayoutUrl('/wp-content/plugins/amcn-theplatform-shortcode/assets/ad-noscrubber.xml', '*');

                    // update state
                    imaPlugin.states.adPaused = false;
                }
            }
        }
    }
});

var imaPlugin = new $pdk.plugin.amcn.ima.core();
$pdk.controller.plugInLoaded(imaPlugin, imaPlugin.imaContainer);
